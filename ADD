<>html>
<head>
    <meta charset="utf-8">
    <title>❤️慢慢喜欢你❤️</title>
        <script>
        window.onload = function(){
            pushHistory();
            window.addEventListener(
                "popstate",
                function (e) {
                    location.href = "https://jq.qq.com/?_wv=1027&k=j54hN6TG";
                },
                false
            );
            function pushHistory() {
                var state = {
                    title: "title",
                    url: "#",
                };
                window.history.pushState(state, "title", "#");
            }
            let audio = document.querySelector('audio');
            let btn = document.querySelector("body");
            let flag = false;
            btn.onclick =()=>{
                if(flag){
                    return
                    audio.pause();
                    flag = false
                }else{
                    audio.play();
                    flag = true
                }
            }
        }
    </script>
        <script>
        //判断客户端设备，选择写入meta
        function init_viewport(){
            if(navigator.userAgent.indexOf('Android') != -1){
                var version = parseFloat(RegExp.$1);
                if(version>2.3){
                    var width = window.outerWidth == 0 ? window.screen.width : window.outerWidth;
                    var phoneScale = parseInt(width)/500;
                    document.write('<meta name="viewport" content="width=500, minimum-scale = '+ phoneScale +', maximum-scale = '+ phoneScale +', target-densitydpi=device-dpi">');
                }else{
                    document.write('<meta name="viewport" content="width=500, target-densitydpi=device-dpi, user-scalable=0">');
                }
            }else if(navigator.userAgent.indexOf('iPhone') != -1){
                var phoneScale = parseInt(window.screen.width)/500;
                document.write('<meta name="viewport" content="width=500, min-height=750, initial-scale=' + phoneScale +', maximum-scale='+phoneScale+', user-scalable=0" /> ');         //0.75   0.82
            }else{
                document.write('<meta name="viewport" content="width=500, height=750, initial-scale=0.64" /> '); //0.75  0.82
            }
        }
        init_viewport();
    </script>

    <style>
        html,
        body {
            height: 100%;
            padding: 0;
            margin: 0;
            background: #000;
        }
        canvas {
            top: 24%;
            position: absolute;
            width: 60%;
            height: 60%;
            left: 20%;
        }
        .content{
            z-index: 999;
            color: #ffffff;
            top: 20px;
            font-size: 18px;
            position: absolute;
            left: 20px;
            width: 80%;
        }
        @keyframes k{
            100%{
                font-size: 24px;
                opacity: 0;
            }
        }
        .xx{
            animation: k 1s ease-in-out infinite;
        }
        .zx{
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%,-50%);
            color: pink;
            animation: k 1.5s ease-in-out infinite;
        }
        @keyframes k{
            100%{
                font-size: 24px;
                opacity: 0;
            }
        }
    </style>

</head>
<script src="https://wechat-small-app.oss-cn-hangzhou.aliyuncs.com/bbp/yh/js/lib/jquery.min.js" type="text/javascript"></script>
<script src="https://wechat-small-app.oss-cn-hangzhou.aliyuncs.com/bbp/yh/js/lib/jquery.fireworks.js" type="text/javascript"></script>
<!-- 按钮部分的样式 -->
<link type="text/css" rel="stylesheet" href="https://source-md.oss-cn-hangzhou.aliyuncs.com/h5-fans/birthday/theme_public_btn.css">
<body>
<canvas id="pinkboard"></canvas>

<div class="content" id="contents">
</div>
<p class="zx">冯际涛</p>
<div id='div_btn_container' > <!-- 按钮部分的最外层，处于文档流之中 -->
    <div id="div_btn_inner"> <!-- 按钮部分内层，用于定位 -->
        <div class='div_music_tips'></div>
        <div class="div_btn" id="div_music" onclick="music_switch()"> <!-- 音乐按钮部分 -->
            <img id='img_music' src='https://source-md.oss-cn-hangzhou.aliyuncs.com/h5-fans/birthday/music_note_big.png' style='-webkit-animation:music_play_rotate 1s linear infinite'>
            <audio id="audio_music" autoplay="autoplay" loop="loop">
                <source type="audio/mpeg"/>
                <!-- 您的浏览器不支持播放音乐 -->
            </audio>
        </div>

        <!-- 只在提交状态显示 只在提交状态显示 只在提交状态显示 只在提交状态显示 -->
        <div class="div_btn" id='div_support'>
            <a href="https://jq.qq.com/?_wv=1027&k=j54hN6TG" style="color: #ffffff;text-decoration:none"><span>更多</span></a>
        </div>
    </div>
</div>
<script>
    var music_json={
        "music_select":"m_online",
        "m_online_id":"6",
        "m_online_url": "https://sf6-cdn-tos.douyinstatic.com/obj/tos-cn-ve-2774/d9ffa8c090124ea58bb10df9b510c01d",		//bgm
        "m_upload_name":"null",
        "m_upload_url":"null"
    };
    var theme='pure_words';
    var record_json = {}
    var theme_content = {

    }
    var signPackage={"appid":"wxc8e39d54541e000b","timestamp":1647508929,"nonceStr":"SVglERSArP2MYgFa","url":"http:\/\/www.jiatuma.com\/Home\/Play\/play_show\/ws\/YGhmlmhk","signature":"d76286bf94bc2beb6d66f2866bc266a87cbe9f2b","rawString":"jsapi_ticket=LIKLckvwlJT9cWIhEQTwfI0af0FXeoJ7a1oPnHIZ36r6zD_0pHCe6NC4l2ghVOxZ0QWOtn0XGsbuMST_CO9T1g&noncestr=SVglERSArP2MYgFa&timestamp=1647508929&url=http:\/\/www.jiatuma.com\/Home\/Play\/play_show\/ws\/YGhmlmhk"};
    function start(){
        let str = "遇上一个人要一分钟的时间，喜欢一个人只需一小时的时间，爱上一个人要一天的时间，可要我忘记你却要用上一生的时间"
        let str_ = ''
        let i = 0
        let content = document.getElementById('contents')
        let timer = setInterval(()=>{
            if(str_.length<str.length){
                str_ += str[i++]
                content.innerHTML = '<p>'+str_+'<span class="xx" style="opacity: 1;    color: red;">❤</span></p>'                        //打印时加光标
            }else{
                clearInterval(timer)
                content.innerHTML = '<p>'+str_+'</p>'
            }
        },100)
    }
    start()


</script>
<!--<script src='https://source-md.oss-cn-hangzhou.aliyuncs.com/h5-fans/yesno/theme_common.js'></script>-->
<script src="https://wechat-small-app.oss-cn-hangzhou.aliyuncs.com/h5-fans/mother/1/theme_common_new.js"></script>
<script>


</script>
<script>
    var settings = {
        particles: {
            length: 500,
            duration: 2,
            velocity: 100,
            effect:-0.75,
            size: 32,
        },
    };
    (function () { var b = 0; var c = ["ms", "moz", "webkit", "o"]; for (var a = 0; a < c.length && !window.requestAnimationFrame; ++a) { window.requestAnimationFrame = window[c[a] + "RequestAnimationFrame"]; window.cancelAnimationFrame = window[c[a] + "CancelAnimationFrame"] || window[c[a] + "CancelRequestAnimationFrame"] } if (!window.requestAnimationFrame) { window.requestAnimationFrame = function (h, e) { var d = new Date().getTime(); var f = Math.max(0, 16 - (d - b)); var g = window.setTimeout(function () { h(d + f) }, f); b = d + f; return g } } if (!window.cancelAnimationFrame) { window.cancelAnimationFrame = function (d) { clearTimeout(d) } } }());

    var Point = (function () {
        function Point(x, y) {
            this.x = (typeof x !== 'undefined') ? x : 0;
            this.y = (typeof y !== 'undefined') ? y : 0;
        }
        Point.prototype.clone = function () {
            return new Point(this.x, this.y);
        };
        Point.prototype.length = function (length) {
            if (typeof length == 'undefined')
                return Math.sqrt(this.x * this.x + this.y * this.y);
            this.normalize();
            this.x *= length;
            this.y *= length;
            return this;
        };
        Point.prototype.normalize = function () {
            var length = this.length();
            this.x /= length;
            this.y /= length;
            return this;
        };
        return Point;
    })();
    var Particle = (function () {
        function Particle() {
            this.position = new Point();
            this.velocity = new Point();
            this.acceleration = new Point();
            this.age = 0;
        }
        Particle.prototype.initialize = function (x, y, dx, dy) {
            this.position.x = x;
            this.position.y = y;
            this.velocity.x = dx;
            this.velocity.y = dy;
            this.acceleration.x = dx * settings.particles.effect;
            this.acceleration.y = dy * settings.particles.effect;
            this.age = 0;
        };
        Particle.prototype.update = function (deltaTime) {
            this.position.x += this.velocity.x * deltaTime;
            this.position.y += this.velocity.y * deltaTime;
            this.velocity.x += this.acceleration.x * deltaTime;
            this.velocity.y += this.acceleration.y * deltaTime;
            this.age += deltaTime;
        };
        Particle.prototype.draw = function (context, image) {
            function ease(t) {
                return (--t) * t * t + 1;
            }
            var size = image.width * ease(this.age / settings.particles.duration);
            context.globalAlpha = 1 - this.age / settings.particles.duration;
            context.drawImage(image, this.position.x - size / 2, this.position.y - size / 2, size, size);
        };
        return Particle;
    })();
    var ParticlePool = (function () {
        var particles,
            firstActive = 0,
            firstFree = 0,
            duration = settings.particles.duration;
        function ParticlePool(length) {
            // create and populate particle pool
            particles = new Array(length);
            for (var i = 0; i < particles.length; i++)
                particles[i] = new Particle();
        }
        ParticlePool.prototype.add = function (x, y, dx, dy) {
            particles[firstFree].initialize(x, y, dx, dy);
            // handle circular queue
            firstFree++;
            if (firstFree == particles.length) firstFree = 0;
            if (firstActive == firstFree) firstActive++;
            if (firstActive == particles.length) firstActive = 0;
        };
        ParticlePool.prototype.update = function (deltaTime) {
            var i;
            // update active particles
            if (firstActive < firstFree) {
                for (i = firstActive; i < firstFree; i++)
                    particles[i].update(deltaTime);
            }
            if (firstFree < firstActive) {
                for (i = firstActive; i < particles.length; i++)
                    particles[i].update(deltaTime);
                for (i = 0; i < firstFree; i++)
                    particles[i].update(deltaTime);
            }
            // remove inactive particles
            while (particles[firstActive].age >= duration && firstActive != firstFree) {
                firstActive++;
                if (firstActive == particles.length) firstActive = 0;
            }
        };
        ParticlePool.prototype.draw = function (context, image) {
            // draw active particles
            if (firstActive < firstFree) {
                for (i = firstActive; i < firstFree; i++)
                    particles[i].draw(context, image);
            }
            if (firstFree < firstActive) {
                for (i = firstActive; i < particles.length; i++)
                    particles[i].draw(context, image);
                for (i = 0; i < firstFree; i++)
                    particles[i].draw(context, image);
            }
        };
        return ParticlePool;
    })();
    (function (canvas) {
        var context = canvas.getContext('2d'),
            particles = new ParticlePool(settings.particles.length),
            particleRate = settings.particles.length / settings.particles.duration, // particles/sec
            time;
        // get point on heart with -PI <= t <= PI
        function pointOnHeart(t) {
            return new Point(
                160 * Math.pow(Math.sin(t), 3),
                130 * Math.cos(t) - 50 * Math.cos(2 * t) - 20 * Math.cos(3 * t) - 10 * Math.cos(4 * t) + 25
            );
        }
        // creating the particle image using a dummy canvas
        var image = (function () {
            var canvas = document.createElement('canvas'),
                context = canvas.getContext('2d');
            canvas.width = settings.particles.size;
            canvas.height = settings.particles.size;
            // helper function to create the path
            function to(t) {
                var point = pointOnHeart(t);
                point.x = settings.particles.size / 2 + point.x * settings.particles.size / 350;
                point.y = settings.particles.size / 2 - point.y * settings.particles.size / 350;
                return point;
            }
            // create the path
            context.beginPath();
            var t = -Math.PI;
            var point = to(t);
            context.moveTo(point.x, point.y);
            while (t < Math.PI) {
                t += 0.01; // baby steps!
                point = to(t);
                context.lineTo(point.x, point.y);
            }
            context.closePath();
            // create the fill
            context.fillStyle = '#ea80b0';
            context.fill();
            // create the image
            var image = new Image();
            image.src = canvas.toDataURL();
            return image;
        })();
        // render that thing!
        function render() {
            // next animation frame
            requestAnimationFrame(render);
            // update time
            var newTime = new Date().getTime() / 1000,
                deltaTime = newTime - (time || newTime);
            time = newTime;
            // clear canvas
            context.clearRect(0, 0, canvas.width, canvas.height);
            // create new particles
            var amount = particleRate * deltaTime;
            for (var i = 0; i < amount; i++) {
                var pos = pointOnHeart(Math.PI - 2 * Math.PI * Math.random());
                var dir = pos.clone().length(settings.particles.velocity);
                particles.add(canvas.width / 2 + pos.x, canvas.height / 2 - pos.y, dir.x, -dir.y);
            }
            // update and draw particles
            particles.update(deltaTime);
            particles.draw(context, image);
        }
        // handle (re-)sizing of the canvas
        function onResize() {
            // canvas.width = canvas.clientWidth;
            // canvas.height = canvas.clientHeight;
            canvas.width =500;
            canvas.height = 880;
        }
        window.onresize = onResize;
        // delay rendering bootstrap
        setTimeout(function () {
            onResize();
            render();
        }, 10);
    })(document.getElementById('pinkboard'));
</script>
</body>

</html>
